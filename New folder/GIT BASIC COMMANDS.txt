Configure Git :-

git config --global user.name "w3schools-test"
git config --global user.email "test@w3schools.com"

Note: Use global to set the username and e-mail for every repository on your computer.
If you want to set the username/e-mail for just the current repo, you can remove global


Initialize Git :-

git init 
Initialized empty Git repository in /Users/user/myproject/.git/

Note: Git now knows that it should watch the folder you initiated it on.
Git creates a hidden folder to keep track of changes.


Git Adding New Files :-

save it to our new folder as "index.html"

Let's go back to the terminal and list the files in our current working directory:

ls                    (    'ls'     will list the files in the directory. We can see that index.html is there.)
index.html

Then we check the Git status and see if it is a part of our repo:

git status

+++++++++++++++++++++++
On branch master

No commits yet

Untracked files:
  (use "git add ..." to include in what will be committed)
    index.html

nothing added to commit but untracked files present (use "git add" to track)
++++++++++++++++++++++++++++++++

Files in your Git repository folder can be in one of 2 states:

Tracked ------- files that Git knows about and are added to the repository
Untracked ----- files that are in your working directory, but not added to the repository

When you first add files to an empty repository, they are all untracked. 
To get Git to track them, you need to stage them, or add them to the staging environment.


Git Staging Environment :-

Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.

git add index.html

The file should be Staged. Let's check the status::

git status
++++++++++++++++++++++++++++++
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached ..." to unstage)
    new file: index.html
++++++++++++++++++++++++++++++

git add --all              [ To add all files into staging directory ]

Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files.

Note: The shorthand command for git add --all is git add -A


Git Commit :-

git commit -m "First release of Hello World!"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[master (root-commit) 221ec6e] First release of Hello World!
 3 files changed, 26 insertions(+)
 create mode 100644 README.md
 create mode 100644 bluestyle.css
 create mode 100644 index.html
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The commit command performs a commit, and the -m "message" adds a message.


Git Commit without Stage :-

git commit -a -m "Updated index.html with a new line"

+++++++++++++++++++++++
git status --short
 M index.html
Note: Short status flags are:

?? - Untracked files
A - Files added to stage
M - Modified files
D - Deleted files
+++++++++++++++++++++++++++

Working with Git Branches :-

In Git, a branch is a new/separate version of the main repository.

Branches allow you to work on different parts of a project without impacting the main branch.

When the work is complete, a branch can be merged with the main project.

You can even switch between branches and work on different projects without them interfering with each other.

New Git Branch :-


Let add some new features to our index.html page.
We are working in our local repository, and we do not want to disturb or possibly wreck the main project.
So we create a new branch:

git branch hello-world-images

Now we created a new branch called "hello-world-images"

Let's confirm that we have created a new branch:

git branch
++++++++++++++++++++++++++++++++
  hello-world-images
* master
+++++++++++++++++++++++++++++

checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:

git checkout hello-world-images
+++++++++++++++++++++++
Switched to branch 'hello-world-images'
+++++++++++++++++++++++++++++

Merge Branches :-

First, we need to change to the master branch:     git checkout master

Now we merge the current branch (master) with emergency-fix:

git merge emergency-fix
+++++++++++++++++++++++++++++++++++
Updating 09f4acd..dfa79db
Fast-forward
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
++++++++++++++++++++++++++++++++++++++++++++++++++++
---Testing... ---
